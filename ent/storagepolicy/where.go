// Code generated by ent, DO NOT EDIT.

package storagepolicy

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/cloudreve/Cloudreve/v4/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldName, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldType, v))
}

// Server applies equality check predicate on the "server" field. It's identical to ServerEQ.
func Server(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldServer, v))
}

// BucketName applies equality check predicate on the "bucket_name" field. It's identical to BucketNameEQ.
func BucketName(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldBucketName, v))
}

// IsPrivate applies equality check predicate on the "is_private" field. It's identical to IsPrivateEQ.
func IsPrivate(v bool) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldIsPrivate, v))
}

// AccessKey applies equality check predicate on the "access_key" field. It's identical to AccessKeyEQ.
func AccessKey(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldAccessKey, v))
}

// SecretKey applies equality check predicate on the "secret_key" field. It's identical to SecretKeyEQ.
func SecretKey(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldSecretKey, v))
}

// MaxSize applies equality check predicate on the "max_size" field. It's identical to MaxSizeEQ.
func MaxSize(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldMaxSize, v))
}

// DirNameRule applies equality check predicate on the "dir_name_rule" field. It's identical to DirNameRuleEQ.
func DirNameRule(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldDirNameRule, v))
}

// FileNameRule applies equality check predicate on the "file_name_rule" field. It's identical to FileNameRuleEQ.
func FileNameRule(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldFileNameRule, v))
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldNodeID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldType, v))
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldType, v))
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldType, v))
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldType, v))
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldType, v))
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldType, v))
}

// ServerEQ applies the EQ predicate on the "server" field.
func ServerEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldServer, v))
}

// ServerNEQ applies the NEQ predicate on the "server" field.
func ServerNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldServer, v))
}

// ServerIn applies the In predicate on the "server" field.
func ServerIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldServer, vs...))
}

// ServerNotIn applies the NotIn predicate on the "server" field.
func ServerNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldServer, vs...))
}

// ServerGT applies the GT predicate on the "server" field.
func ServerGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldServer, v))
}

// ServerGTE applies the GTE predicate on the "server" field.
func ServerGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldServer, v))
}

// ServerLT applies the LT predicate on the "server" field.
func ServerLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldServer, v))
}

// ServerLTE applies the LTE predicate on the "server" field.
func ServerLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldServer, v))
}

// ServerContains applies the Contains predicate on the "server" field.
func ServerContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldServer, v))
}

// ServerHasPrefix applies the HasPrefix predicate on the "server" field.
func ServerHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldServer, v))
}

// ServerHasSuffix applies the HasSuffix predicate on the "server" field.
func ServerHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldServer, v))
}

// ServerIsNil applies the IsNil predicate on the "server" field.
func ServerIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldServer))
}

// ServerNotNil applies the NotNil predicate on the "server" field.
func ServerNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldServer))
}

// ServerEqualFold applies the EqualFold predicate on the "server" field.
func ServerEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldServer, v))
}

// ServerContainsFold applies the ContainsFold predicate on the "server" field.
func ServerContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldServer, v))
}

// BucketNameEQ applies the EQ predicate on the "bucket_name" field.
func BucketNameEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldBucketName, v))
}

// BucketNameNEQ applies the NEQ predicate on the "bucket_name" field.
func BucketNameNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldBucketName, v))
}

// BucketNameIn applies the In predicate on the "bucket_name" field.
func BucketNameIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldBucketName, vs...))
}

// BucketNameNotIn applies the NotIn predicate on the "bucket_name" field.
func BucketNameNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldBucketName, vs...))
}

// BucketNameGT applies the GT predicate on the "bucket_name" field.
func BucketNameGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldBucketName, v))
}

// BucketNameGTE applies the GTE predicate on the "bucket_name" field.
func BucketNameGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldBucketName, v))
}

// BucketNameLT applies the LT predicate on the "bucket_name" field.
func BucketNameLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldBucketName, v))
}

// BucketNameLTE applies the LTE predicate on the "bucket_name" field.
func BucketNameLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldBucketName, v))
}

// BucketNameContains applies the Contains predicate on the "bucket_name" field.
func BucketNameContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldBucketName, v))
}

// BucketNameHasPrefix applies the HasPrefix predicate on the "bucket_name" field.
func BucketNameHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldBucketName, v))
}

// BucketNameHasSuffix applies the HasSuffix predicate on the "bucket_name" field.
func BucketNameHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldBucketName, v))
}

// BucketNameIsNil applies the IsNil predicate on the "bucket_name" field.
func BucketNameIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldBucketName))
}

// BucketNameNotNil applies the NotNil predicate on the "bucket_name" field.
func BucketNameNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldBucketName))
}

// BucketNameEqualFold applies the EqualFold predicate on the "bucket_name" field.
func BucketNameEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldBucketName, v))
}

// BucketNameContainsFold applies the ContainsFold predicate on the "bucket_name" field.
func BucketNameContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldBucketName, v))
}

// IsPrivateEQ applies the EQ predicate on the "is_private" field.
func IsPrivateEQ(v bool) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldIsPrivate, v))
}

// IsPrivateNEQ applies the NEQ predicate on the "is_private" field.
func IsPrivateNEQ(v bool) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldIsPrivate, v))
}

// IsPrivateIsNil applies the IsNil predicate on the "is_private" field.
func IsPrivateIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldIsPrivate))
}

// IsPrivateNotNil applies the NotNil predicate on the "is_private" field.
func IsPrivateNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldIsPrivate))
}

// AccessKeyEQ applies the EQ predicate on the "access_key" field.
func AccessKeyEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldAccessKey, v))
}

// AccessKeyNEQ applies the NEQ predicate on the "access_key" field.
func AccessKeyNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldAccessKey, v))
}

// AccessKeyIn applies the In predicate on the "access_key" field.
func AccessKeyIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldAccessKey, vs...))
}

// AccessKeyNotIn applies the NotIn predicate on the "access_key" field.
func AccessKeyNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldAccessKey, vs...))
}

// AccessKeyGT applies the GT predicate on the "access_key" field.
func AccessKeyGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldAccessKey, v))
}

// AccessKeyGTE applies the GTE predicate on the "access_key" field.
func AccessKeyGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldAccessKey, v))
}

// AccessKeyLT applies the LT predicate on the "access_key" field.
func AccessKeyLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldAccessKey, v))
}

// AccessKeyLTE applies the LTE predicate on the "access_key" field.
func AccessKeyLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldAccessKey, v))
}

// AccessKeyContains applies the Contains predicate on the "access_key" field.
func AccessKeyContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldAccessKey, v))
}

// AccessKeyHasPrefix applies the HasPrefix predicate on the "access_key" field.
func AccessKeyHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldAccessKey, v))
}

// AccessKeyHasSuffix applies the HasSuffix predicate on the "access_key" field.
func AccessKeyHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldAccessKey, v))
}

// AccessKeyIsNil applies the IsNil predicate on the "access_key" field.
func AccessKeyIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldAccessKey))
}

// AccessKeyNotNil applies the NotNil predicate on the "access_key" field.
func AccessKeyNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldAccessKey))
}

// AccessKeyEqualFold applies the EqualFold predicate on the "access_key" field.
func AccessKeyEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldAccessKey, v))
}

// AccessKeyContainsFold applies the ContainsFold predicate on the "access_key" field.
func AccessKeyContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldAccessKey, v))
}

// SecretKeyEQ applies the EQ predicate on the "secret_key" field.
func SecretKeyEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldSecretKey, v))
}

// SecretKeyNEQ applies the NEQ predicate on the "secret_key" field.
func SecretKeyNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldSecretKey, v))
}

// SecretKeyIn applies the In predicate on the "secret_key" field.
func SecretKeyIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldSecretKey, vs...))
}

// SecretKeyNotIn applies the NotIn predicate on the "secret_key" field.
func SecretKeyNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldSecretKey, vs...))
}

// SecretKeyGT applies the GT predicate on the "secret_key" field.
func SecretKeyGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldSecretKey, v))
}

// SecretKeyGTE applies the GTE predicate on the "secret_key" field.
func SecretKeyGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldSecretKey, v))
}

// SecretKeyLT applies the LT predicate on the "secret_key" field.
func SecretKeyLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldSecretKey, v))
}

// SecretKeyLTE applies the LTE predicate on the "secret_key" field.
func SecretKeyLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldSecretKey, v))
}

// SecretKeyContains applies the Contains predicate on the "secret_key" field.
func SecretKeyContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldSecretKey, v))
}

// SecretKeyHasPrefix applies the HasPrefix predicate on the "secret_key" field.
func SecretKeyHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldSecretKey, v))
}

// SecretKeyHasSuffix applies the HasSuffix predicate on the "secret_key" field.
func SecretKeyHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldSecretKey, v))
}

// SecretKeyIsNil applies the IsNil predicate on the "secret_key" field.
func SecretKeyIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldSecretKey))
}

// SecretKeyNotNil applies the NotNil predicate on the "secret_key" field.
func SecretKeyNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldSecretKey))
}

// SecretKeyEqualFold applies the EqualFold predicate on the "secret_key" field.
func SecretKeyEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldSecretKey, v))
}

// SecretKeyContainsFold applies the ContainsFold predicate on the "secret_key" field.
func SecretKeyContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldSecretKey, v))
}

// MaxSizeEQ applies the EQ predicate on the "max_size" field.
func MaxSizeEQ(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldMaxSize, v))
}

// MaxSizeNEQ applies the NEQ predicate on the "max_size" field.
func MaxSizeNEQ(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldMaxSize, v))
}

// MaxSizeIn applies the In predicate on the "max_size" field.
func MaxSizeIn(vs ...int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldMaxSize, vs...))
}

// MaxSizeNotIn applies the NotIn predicate on the "max_size" field.
func MaxSizeNotIn(vs ...int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldMaxSize, vs...))
}

// MaxSizeGT applies the GT predicate on the "max_size" field.
func MaxSizeGT(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldMaxSize, v))
}

// MaxSizeGTE applies the GTE predicate on the "max_size" field.
func MaxSizeGTE(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldMaxSize, v))
}

// MaxSizeLT applies the LT predicate on the "max_size" field.
func MaxSizeLT(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldMaxSize, v))
}

// MaxSizeLTE applies the LTE predicate on the "max_size" field.
func MaxSizeLTE(v int64) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldMaxSize, v))
}

// MaxSizeIsNil applies the IsNil predicate on the "max_size" field.
func MaxSizeIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldMaxSize))
}

// MaxSizeNotNil applies the NotNil predicate on the "max_size" field.
func MaxSizeNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldMaxSize))
}

// DirNameRuleEQ applies the EQ predicate on the "dir_name_rule" field.
func DirNameRuleEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldDirNameRule, v))
}

// DirNameRuleNEQ applies the NEQ predicate on the "dir_name_rule" field.
func DirNameRuleNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldDirNameRule, v))
}

// DirNameRuleIn applies the In predicate on the "dir_name_rule" field.
func DirNameRuleIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldDirNameRule, vs...))
}

// DirNameRuleNotIn applies the NotIn predicate on the "dir_name_rule" field.
func DirNameRuleNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldDirNameRule, vs...))
}

// DirNameRuleGT applies the GT predicate on the "dir_name_rule" field.
func DirNameRuleGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldDirNameRule, v))
}

// DirNameRuleGTE applies the GTE predicate on the "dir_name_rule" field.
func DirNameRuleGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldDirNameRule, v))
}

// DirNameRuleLT applies the LT predicate on the "dir_name_rule" field.
func DirNameRuleLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldDirNameRule, v))
}

// DirNameRuleLTE applies the LTE predicate on the "dir_name_rule" field.
func DirNameRuleLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldDirNameRule, v))
}

// DirNameRuleContains applies the Contains predicate on the "dir_name_rule" field.
func DirNameRuleContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldDirNameRule, v))
}

// DirNameRuleHasPrefix applies the HasPrefix predicate on the "dir_name_rule" field.
func DirNameRuleHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldDirNameRule, v))
}

// DirNameRuleHasSuffix applies the HasSuffix predicate on the "dir_name_rule" field.
func DirNameRuleHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldDirNameRule, v))
}

// DirNameRuleIsNil applies the IsNil predicate on the "dir_name_rule" field.
func DirNameRuleIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldDirNameRule))
}

// DirNameRuleNotNil applies the NotNil predicate on the "dir_name_rule" field.
func DirNameRuleNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldDirNameRule))
}

// DirNameRuleEqualFold applies the EqualFold predicate on the "dir_name_rule" field.
func DirNameRuleEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldDirNameRule, v))
}

// DirNameRuleContainsFold applies the ContainsFold predicate on the "dir_name_rule" field.
func DirNameRuleContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldDirNameRule, v))
}

// FileNameRuleEQ applies the EQ predicate on the "file_name_rule" field.
func FileNameRuleEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldFileNameRule, v))
}

// FileNameRuleNEQ applies the NEQ predicate on the "file_name_rule" field.
func FileNameRuleNEQ(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldFileNameRule, v))
}

// FileNameRuleIn applies the In predicate on the "file_name_rule" field.
func FileNameRuleIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldFileNameRule, vs...))
}

// FileNameRuleNotIn applies the NotIn predicate on the "file_name_rule" field.
func FileNameRuleNotIn(vs ...string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldFileNameRule, vs...))
}

// FileNameRuleGT applies the GT predicate on the "file_name_rule" field.
func FileNameRuleGT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGT(FieldFileNameRule, v))
}

// FileNameRuleGTE applies the GTE predicate on the "file_name_rule" field.
func FileNameRuleGTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldGTE(FieldFileNameRule, v))
}

// FileNameRuleLT applies the LT predicate on the "file_name_rule" field.
func FileNameRuleLT(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLT(FieldFileNameRule, v))
}

// FileNameRuleLTE applies the LTE predicate on the "file_name_rule" field.
func FileNameRuleLTE(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldLTE(FieldFileNameRule, v))
}

// FileNameRuleContains applies the Contains predicate on the "file_name_rule" field.
func FileNameRuleContains(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContains(FieldFileNameRule, v))
}

// FileNameRuleHasPrefix applies the HasPrefix predicate on the "file_name_rule" field.
func FileNameRuleHasPrefix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasPrefix(FieldFileNameRule, v))
}

// FileNameRuleHasSuffix applies the HasSuffix predicate on the "file_name_rule" field.
func FileNameRuleHasSuffix(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldHasSuffix(FieldFileNameRule, v))
}

// FileNameRuleIsNil applies the IsNil predicate on the "file_name_rule" field.
func FileNameRuleIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldFileNameRule))
}

// FileNameRuleNotNil applies the NotNil predicate on the "file_name_rule" field.
func FileNameRuleNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldFileNameRule))
}

// FileNameRuleEqualFold applies the EqualFold predicate on the "file_name_rule" field.
func FileNameRuleEqualFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEqualFold(FieldFileNameRule, v))
}

// FileNameRuleContainsFold applies the ContainsFold predicate on the "file_name_rule" field.
func FileNameRuleContainsFold(v string) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldContainsFold(FieldFileNameRule, v))
}

// SettingsIsNil applies the IsNil predicate on the "settings" field.
func SettingsIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldSettings))
}

// SettingsNotNil applies the NotNil predicate on the "settings" field.
func SettingsNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldSettings))
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldEQ(FieldNodeID, v))
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNEQ(FieldNodeID, v))
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIn(FieldNodeID, vs...))
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...int) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotIn(FieldNodeID, vs...))
}

// NodeIDIsNil applies the IsNil predicate on the "node_id" field.
func NodeIDIsNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldIsNull(FieldNodeID))
}

// NodeIDNotNil applies the NotNil predicate on the "node_id" field.
func NodeIDNotNil() predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.FieldNotNull(FieldNodeID))
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntities applies the HasEdge predicate on the "entities" edge.
func HasEntities() predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntitiesTable, EntitiesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitiesWith applies the HasEdge predicate on the "entities" edge with a given conditions (other predicates).
func HasEntitiesWith(preds ...predicate.Entity) predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := newEntitiesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.StoragePolicy {
	return predicate.StoragePolicy(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StoragePolicy) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StoragePolicy) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StoragePolicy) predicate.StoragePolicy {
	return predicate.StoragePolicy(sql.NotPredicates(p))
}
